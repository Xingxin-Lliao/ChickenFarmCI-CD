trigger:
- main

stages:
- stage: Build
  jobs:
  - job: BuildJob
    pool:
      vmImage: ubuntu-22.04
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'   # 使用最新 .NET 8 SDK
      displayName: 'Use .NET 8 SDK'

    - script: |
        echo "Current directory: $(System.DefaultWorkingDirectory)"
        ls -l
        ls -l modules

        echo "Building module ${MODULE_NAME}"
        cd ./modules/${MODULE_NAME}
        dotnet publish --os linux --arch x64 /t:PublishContainer

        echo "=== Local Docker images after dotnet publish ==="
        docker images

        # 将模块名转换为小写
        MODULE_NAME_LOWER=$(echo "${MODULE_NAME}" | tr '[:upper:]' '[:lower:]')
        echo "Lowercase module name: $MODULE_NAME_LOWER"

        # 假设 dotnet publish 生成的镜像名字就是小写模块名
        echo "Tagging image..."
        docker tag ${MODULE_NAME_LOWER} ${CONTAINER_REGISTRY_ADDRESS}/${MODULE_NAME_LOWER}:$(MODULE_VERSION)

        echo "Pushing image to container registry..."
        docker push ${CONTAINER_REGISTRY_ADDRESS}/${MODULE_NAME_LOWER}:$(MODULE_VERSION)
      displayName: 'Build and Push Docker Image'
      env:
        MODULE_NAME: $(MODULE_NAME)
        MODULE_VERSION: $(MODULE_VERSION)
        CONTAINER_REGISTRY_USERNAME_chickenfarmmardrid: $(CONTAINER_REGISTRY_USERNAME_chickenfarmmardrid)
        CONTAINER_REGISTRY_PASSWORD_chickenfarmmardrid: $(CONTAINER_REGISTRY_PASSWORD_chickenfarmmardrid)
        CONTAINER_REGISTRY_ADDRESS: $(CONTAINER_REGISTRY_ADDRESS)

    - script: |
        echo "Logging into container registry"
        echo $(CONTAINER_REGISTRY_PASSWORD_chickenfarmmardrid) | docker login $(CONTAINER_REGISTRY_ADDRESS) -u $(CONTAINER_REGISTRY_USERNAME_chickenfarmmardrid) --password-stdin
      displayName: 'Docker Login'
      env:
        CONTAINER_REGISTRY_USERNAME_chickenfarmmardrid: $(CONTAINER_REGISTRY_USERNAME_chickenfarmmardrid)
        CONTAINER_REGISTRY_PASSWORD_chickenfarmmardrid: $(CONTAINER_REGISTRY_PASSWORD_chickenfarmmardrid)
        CONTAINER_REGISTRY_ADDRESS: $(CONTAINER_REGISTRY_ADDRESS)

- stage: Release
  dependsOn: Build
  jobs:
  - job: DeployJob
    pool:
      vmImage: ubuntu-22.04
    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install -y python3.9 python3.9-distutils curl
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        sudo python3.9 get-pip.py
        python3.9 -m pip install -U iotedgedev pyOpenSSL==22.0.0 urllib3==1.22 requests
      displayName: 'Install Python 3.9 and iotedgedev'

    - task: AzureIoTEdge@2
      inputs:
        action: 'Generate deployment manifest'
        templateFilePath: 'deployment.template.json'   
        defaultPlatform: 'amd64'
        deploymentManifestOutputPath: '$(System.DefaultWorkingDirectory)/config/deployment.json'
        validateGeneratedDeploymentManifest: false

    - task: AzureIoTEdge@2
      inputs:
        action: 'Deploy to IoT Edge devices'
        deploymentFilePath: '$(System.DefaultWorkingDirectory)/config/deployment.json'
        azureSubscription: 'ChickenFarmConnection'   
        iothubname: 'ChickenFarmMadrid'                
        deploymentid: '$(System.TeamProject)-devops-deployment'
        priority: 0
        deviceOption: 'Single Device'
        deviceId: 'airquality'  # 注意这里也要小写，保持和镜像名一致
